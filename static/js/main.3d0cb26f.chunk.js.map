{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","services/imageApi.js","components/Loader/Loader.js","components/Button/Button.js","components/Modal/Modal.js","components/ImageGallery/ImageGallery.js","App.js","index.js"],"names":["Searchbar","onSubmitProp","useState","pictureName","setPictureName","className","onSubmit","event","preventDefault","trim","toast","error","type","autoComplete","placeholder","name","value","onChange","currentTarget","toLowerCase","ImageGalleryItem","webformatURL","onOpen","largeImageURL","onClick","src","alt","fetchImages","page","fetch","then","response","json","data","hits","Spinner","color","height","width","timeout","LoadMoreBtn","onLoadMoreBtn","modalRoot","document","querySelector","Modal","onClose","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","target","shortid","require","ImageGallery","setError","status","setStatus","pictures","setPictures","setPage","largeUrl","setLargeUrl","showModal","setShowModal","prev","length","scrollToLoadBtn","catch","scrollTo","top","documentElement","scrollHeight","behavior","takeModalPicture","url","map","picture","generate","prevPage","App","autoClose","console","log","ReactDOM","render","StrictMode","getElementById"],"mappings":"qRAKe,SAASA,EAAT,GAAsC,IAAjBC,EAAgB,EAAhBA,aAChC,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAmBA,OACI,wBAAQC,UAAU,YAAlB,SACI,uBAAMA,UAAU,aAAaC,SAdhB,SAAAC,GACjBA,EAAMC,iBACqB,KAAvBL,EAAYM,QAKhBR,EAAaE,GACbC,EAAe,KALXM,IAAMC,MAAM,qBAWZ,UACI,wBAAQC,KAAK,SAASP,UAAU,oBAAhC,SACI,sBAAMA,UAAU,0BAAhB,sBAGJ,uBACIA,UAAU,mBACVO,KAAK,OACLC,aAAa,KACbC,YAAY,2BACZC,KAAK,cACLC,MAAOb,EACPc,SA9BS,SAAAV,GACrBH,EAAeG,EAAMW,cAAcF,MAAMG,uB,YCRlC,SAASC,EAAT,GAAoE,IAAxCC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,cAC7D,OACI,oBAAIlB,UAAU,mBAAmBmB,QAAS,kBACtCF,EAAOC,IADX,SAEI,qBAAKE,IAAKJ,EACNK,IAAI,GACJrB,UAAU,6BCEXsB,MARf,SAAqBxB,EAAayB,GAC9B,OAAOC,MAAM,8BAAD,OAA+B1B,EAA/B,iBAAmDyB,EAAnD,gGACPE,MAAK,SAAAC,GAAQ,OACVA,EAASC,UACZF,MAAK,SAAAG,GACF,OAAOA,EAAKC,S,uBCHT,SAASC,IACpB,OACI,qBAAK9B,UAAU,UAAf,SACI,gCACI,cAAC,IAAD,CAAQO,KAAK,UACTwB,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,MALjB,kBCNG,SAASC,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAClC,OACI,qBAAKpC,UAAU,YAAf,SACI,wBAAQO,KAAK,SAASP,UAAU,UAAUmB,QAASiB,EAAnD,yBCAZ,IAAMC,EAAYC,SAASC,cAAc,eAC1B,SAASC,EAAT,GAAuC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SACrCC,qBAAU,WAEN,OADAC,OAAOC,iBAAiB,UAAWC,GAC5B,WACHF,OAAOG,oBAAoB,UAAWD,OAI9C,IAAMA,EAAgB,SAAC5C,GACA,WAAfA,EAAM8C,MACNP,KAUR,OAAOQ,uBACH,qBAAKjD,UAAU,UAAUmB,QAPD,SAACjB,GACrBA,EAAMW,gBAAkBX,EAAMgD,QAC9BT,KAKJ,SACI,qBAAKzC,UAAU,QAAf,SAAwB0C,MAE5BL,GCtBR,IAAMc,EAAUC,EAAQ,IAET,SAASC,EAAT,GAAwC,IAAhBvD,EAAe,EAAfA,YACnC,EAA0BD,mBAAS,MAAnC,mBAAcyD,GAAd,WACA,EAA4BzD,mBAAS,QAArC,mBAAO0D,EAAP,KAAeC,EAAf,KACA,EAAgC3D,mBAAS,IAAzC,mBAAO4D,EAAP,KAAiBC,EAAjB,KACA,EAAwB7D,mBAAS,GAAjC,mBAAO0B,EAAP,KAAaoC,EAAb,KACA,EAAgC9D,mBAAS,IAAzC,mBAAO+D,EAAP,KAAiBC,EAAjB,KACA,EAAkChE,oBAAS,GAA3C,mBAAOiE,EAAP,KAAkBC,EAAlB,KAEApB,qBAAU,WAENgB,EAAQ,KACT,CAAC7D,IACJ6C,qBAAU,WACD7C,IAGL0D,EAAU,WACVlC,EAAYxB,EAAayB,GACpBE,MAAK,SAACgC,GAECC,EADS,IAATnC,EACYkC,EAEA,SAACO,GAAD,4BAAcA,GAAd,YAAuBP,MAEf,IAApBA,EAASQ,QAIbT,EAAU,YACVU,KAJIV,EAAU,eAMjBW,OAAM,SAAC7D,GACJgD,EAAShD,SAElB,CAACiB,EAAMzB,IAEV,IAAMoE,EAAkB,WACpB,OAAOtB,OAAOwB,SAAS,CACnBC,IAAK/B,SAASgC,gBAAgBC,aAC9BC,SAAU,YAYZC,EAAmB,SAACC,GACtBb,EAAYa,GACZX,GAAa,IAEjB,MAAe,SAAXR,EACO,oBAAIvD,UAAU,QAAd,8CAEI,YAAXuD,EACO,cAACzB,EAAD,IAEI,aAAXyB,EAEI,qBAAIvD,UAAU,QAAd,2BACmBF,EADnB,0BAEI,uBAFJ,8BAOO,aAAXyD,EAEI,gCACI,oBAAIvD,UAAU,eAAd,SACKyD,EAASkB,KAAI,SAACC,GAAD,OACV,cAAC7D,EAAD,CAEIC,aAAc4D,EAAQ5D,aACtBE,cAAe0D,EAAQ1D,cACvBD,OAAQwD,GAHHtB,EAAQ0B,iBAOxBf,GACG,cAACtB,EAAD,CAAOC,QApCH,WAChBsB,GAAcD,IAmCF,SACI,qBAAK1C,IAAKwC,EAAUvC,IAAI,gBAGhC,cAACc,EAAD,CAAaC,cA5CH,WAClBuB,GAAQ,SAACmB,GAAD,OAAcA,EAAW,gBAyBrC,ECtEW,SAASC,IACtB,MAAsClF,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAQA,OACE,gCACE,cAACJ,EAAD,CAAWC,aAAcG,IACzB,cAACsD,EAAD,CAAcvD,YAAaA,IAC3B,cAAC,IAAD,CAAgBkF,UAAW,SDdjCC,QAAQC,IAAI/B,EAAQ0B,YEFpBM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACN,EAAD,MAEFzC,SAASgD,eAAe,W","file":"static/js/main.3d0cb26f.chunk.js","sourcesContent":["\r\nimport { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Searchbar({ onSubmitProp }) {\r\n    const [pictureName, setPictureName] = useState('')\r\n\r\n\r\n    const handleNameChange = event => {\r\n        setPictureName(event.currentTarget.value.toLowerCase())\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (pictureName.trim() === '') {\r\n            toast.error(\"enter something!\");\r\n            return\r\n        }\r\n\r\n        onSubmitProp(pictureName);\r\n        setPictureName('')\r\n\r\n    };\r\n\r\n    return (\r\n        <header className=\"Searchbar\">\r\n            <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n                <button type=\"submit\" className=\"SearchForm-button\">\r\n                    <span className=\"SearchForm-button-label\">Search</span>\r\n                </button>\r\n\r\n                <input\r\n                    className=\"SearchForm-input\"\r\n                    type=\"text\"\r\n                    autoComplete=\"on\"\r\n                    placeholder=\"Search images and photos\"\r\n                    name=\"pictureName\"\r\n                    value={pictureName}\r\n                    onChange={handleNameChange}\r\n                />\r\n            </form>\r\n        </header>\r\n    )\r\n\r\n\r\n}\r\nSearchbar.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { Component } from 'react';\r\n// import { toast } from 'react-toastify';\r\n// import PropTypes from \"prop-types\";\r\n\r\n// export default class Searchbar extends Component {\r\n//     state = {\r\n//         pictureName: '',\r\n//     };\r\n\r\n//     handleNameChange = event => {\r\n//         this.setState({ pictureName: event.currentTarget.value.toLowerCase() });\r\n//     };\r\n\r\n//     handleSubmit = event => {\r\n//         event.preventDefault();\r\n//         if (this.state.pictureName.trim() === '') {\r\n//             toast.error(\"enter something!\");\r\n//             return\r\n//         }\r\n\r\n//         this.props.onSubmitProp(this.state.pictureName);\r\n//         this.setState({ pictureName: '' });\r\n\r\n//     };\r\n//     render() {\r\n//         return (\r\n//             <header className=\"Searchbar\">\r\n//                 <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n//                     <button type=\"submit\" className=\"SearchForm-button\">\r\n//                         <span className=\"SearchForm-button-label\">Search</span>\r\n//                     </button>\r\n\r\n//                     <input\r\n//                         className=\"SearchForm-input\"\r\n//                         type=\"text\"\r\n//                         autoComplete=\"off\"\r\n//                         placeholder=\"Search images and photos\"\r\n//                         name=\"pictureName\"\r\n//                         value={this.state.pictureName}\r\n//                         onChange={this.handleNameChange}\r\n//                     />\r\n//                 </form>\r\n//             </header>\r\n//         )\r\n//     }\r\n\r\n// }\r\n// Searchbar.propTypes = {\r\n//     onSubmit: PropTypes.func,\r\n// };","import PropTypes from \"prop-types\";\r\n\r\nexport default function ImageGalleryItem({ webformatURL, onOpen, largeImageURL }) {\r\n    return (\r\n        <li className=\"ImageGalleryItem\" onClick={() =>\r\n            onOpen(largeImageURL)}>\r\n            <img src={webformatURL}\r\n                alt=\"\"\r\n                className=\"ImageGalleryItem-image\" />\r\n        </li>\r\n    )\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n    webformatURL: PropTypes.string,\r\n    onOpen: PropTypes.func,\r\n    largeImageURL: PropTypes.string,\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import PropTypes from \"prop-types\";\r\n// export default function ImageGalleryItem({\r\n//     webformatURL,\r\n//     onOpen,\r\n//     largeImageURL,\r\n// }) {\r\n//     return (\r\n//         <li className=\"ImageGalleryItem\" onClick={() => onOpen(largeImageURL)}>\r\n//             <img src={webformatURL} alt=\"nice\" className=\"ImageGalleryItem-image\" />\r\n//         </li>\r\n//     );\r\n// }\r\n\r\n// ImageGalleryItem.propTypes = {\r\n//     webformatURL: PropTypes.string,\r\n//     onOpen: PropTypes.func,\r\n//     largeImageURL: PropTypes.string,\r\n// };","\r\n\r\nfunction fetchImages(pictureName, page) {\r\n    return fetch(`https://pixabay.com/api/?q=${pictureName}&page=${page}&key=23171615-fcdc729843fe7af43a640cf8d&image_type=photo&orientation=horizontal&per_page=12`)\r\n        .then(response =>\r\n            response.json())\r\n        .then(data => {\r\n            return data.hits\r\n        })\r\n}\r\nexport default fetchImages\r\n\r\n\r\n","\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nexport default function Spinner() {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div>\r\n                <Loader type=\"Circles\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    timeout={3000} />\r\n                Loading...\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import PropTypes from \"prop-types\";\r\nexport default function LoadMoreBtn({ onLoadMoreBtn }) {\r\n    return (\r\n        <div className=\"load_more\">\r\n            <button type=\"submit\" className=\"Button \" onClick={onLoadMoreBtn}>\r\n                Load More\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nLoadMoreBtn.propTypes = {\r\n    onLoadMoreBtn: PropTypes.func,\r\n};","import PropTypes from \"prop-types\";\r\nimport { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\nexport default function Modal({ onClose, children }) {\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleKeyDown);\r\n        };\r\n    });\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.code === \"Escape\") {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const handleBackdropClick = (event) => {\r\n        if (event.currentTarget === event.target) {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    return createPortal(\r\n        <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n            <div className=\"Modal\">{children}</div>\r\n        </div>,\r\n        modalRoot\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func,\r\n};\r\n\r\n// import PropTypes from \"prop-types\";\r\n// import { Component } from \"react\";\r\n// import { createPortal } from \"react-dom\";\r\n\r\n// const modalRoot = document.querySelector(\"#modal-root\");\r\n// export default class Modal extends Component {\r\n//     componentDidMount() {\r\n//         window.addEventListener(\"keydown\", this.handleKeyDown);\r\n//     }\r\n//     componentWillUnmount() {\r\n//         window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n//     }\r\n\r\n//     handleKeyDown = (event) => {\r\n//         if (event.code === \"Escape\") {\r\n//             this.props.onClose();\r\n//         }\r\n//     };\r\n\r\n//     handleBackdropClick = (event) => {\r\n//         if (event.currentTarget === event.target) {\r\n//             this.props.onClose();\r\n//         }\r\n//     };\r\n//     render() {\r\n//         return createPortal(\r\n//             <div className=\"Overlay\" onClick={this.handleBackdropClick}>\r\n//                 <div className=\"Modal\">{this.props.children}</div>\r\n//             </div>,\r\n//             modalRoot\r\n//         );\r\n//     }\r\n// }","import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ImageGalleryItem from \"../ImageGalleryItem\";\r\nimport fetchImages from \"../../services/imageApi\";\r\nimport Spinner from \"../Loader/Loader\";\r\nimport LoadMoreBtn from \"../Button\";\r\nimport Modal from \"../Modal\";\r\nconst shortid = require(\"shortid\");\r\nconsole.log(shortid.generate());\r\nexport default function ImageGallery({ pictureName }) {\r\n    const [error, setError] = useState(null);\r\n    const [status, setStatus] = useState(\"idle\");\r\n    const [pictures, setPictures] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [largeUrl, setLargeUrl] = useState(\"\");\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // if change searchQuery -> setPage 1\r\n        setPage(1);\r\n    }, [pictureName]);\r\n    useEffect(() => {\r\n        if (!pictureName) {\r\n            return;\r\n        }\r\n        setStatus(\"pending\");\r\n        fetchImages(pictureName, page)\r\n            .then((pictures) => {\r\n                if (page === 1) {\r\n                    setPictures(pictures);\r\n                } else {\r\n                    setPictures((prev) => [...prev, ...pictures]);\r\n                }\r\n                if (pictures.length === 0) {\r\n                    setStatus(\"rejected\");\r\n                    return;\r\n                }\r\n                setStatus(\"resolved\");\r\n                scrollToLoadBtn();\r\n            })\r\n            .catch((error) => {\r\n                setError(error);\r\n            });\r\n    }, [page, pictureName]);\r\n\r\n    const scrollToLoadBtn = () => {\r\n        return window.scrollTo({\r\n            top: document.documentElement.scrollHeight,\r\n            behavior: \"smooth\",\r\n        });\r\n    };\r\n\r\n\r\n    const onLoadMoreBtn = () => {\r\n        setPage((prevPage) => prevPage + 1);\r\n    };\r\n\r\n    const toggleModal = () => {\r\n        setShowModal(!showModal);\r\n    };\r\n    const takeModalPicture = (url) => {\r\n        setLargeUrl(url);\r\n        setShowModal(true);\r\n    };\r\n    if (status === \"idle\") {\r\n        return <h1 className=\"title\"> Enter what are you looking for.</h1>;\r\n    }\r\n    if (status === \"pending\") {\r\n        return <Spinner />;\r\n    }\r\n    if (status === \"rejected\") {\r\n        return (\r\n            <h1 className=\"title\">\r\n                By searching \"{pictureName}\" nothing found, sorry.\r\n                <br />\r\n                Try enter something else\r\n            </h1>\r\n        );\r\n    }\r\n    if (status === \"resolved\") {\r\n        return (\r\n            <div>\r\n                <ul className=\"ImageGallery\">\r\n                    {pictures.map((picture) => (\r\n                        <ImageGalleryItem\r\n                            key={shortid.generate()}\r\n                            webformatURL={picture.webformatURL}\r\n                            largeImageURL={picture.largeImageURL}\r\n                            onOpen={takeModalPicture}\r\n                        />\r\n                    ))}\r\n                </ul>\r\n                {showModal && (\r\n                    <Modal onClose={toggleModal}>\r\n                        <img src={largeUrl} alt=\"modal-img\" />\r\n                    </Modal>\r\n                )}\r\n                <LoadMoreBtn onLoadMoreBtn={onLoadMoreBtn} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nImageGallery.propTypes = {\r\n    inputValue: PropTypes.string,\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useState, useEffect } from 'react';\r\n// import PropTypes from \"prop-types\";\r\n// import ImageGalleryItem from '../ImageGalleryItem';\r\n// import fetchImages from '../../services/imageApi';\r\n// import Spinner from '../Loader/Loader'\r\n// import LoadMoreBtn from '../Button'\r\n// import Modal from '../Modal'\r\n// const shortid = require('shortid');\r\n\r\n// console.log(shortid.generate());\r\n\r\n\r\n// export default function ImageGallery({ pictureName }) {\r\n\r\n//     const [error, setError] = useState(null);\r\n//     const [status, setStatus] = useState('idle');\r\n//     const [pictures, setPictures] = useState([]);\r\n//     const [baseApi] = useState(\"https://pixabay.com/api/\");\r\n//     const [myKey] = useState('23171615-fcdc729843fe7af43a640cf8d');\r\n//     const [page, setPage] = useState(1);\r\n//     const [largeUrl, setLargeUrl] = useState('');\r\n//     const [showModal, setShowModal] = useState(false);\r\n\r\n\r\n//     useEffect(() => {\r\n//         if (!pictureName) {\r\n//             return;\r\n//         }\r\n//         setStatus('pending');\r\n//         setPictures([]);\r\n//         setPage(1);\r\n//         fetchImages(pictureName, baseApi, myKey, page)\r\n//             .then(pictures => {\r\n//                 console.log(pictures);\r\n//                 if (pictures.length === 0) {\r\n//                     setStatus('rejected');;\r\n//                 }\r\n//                 setPictures(pictures);\r\n//             })\r\n//             .then(setStatus('resolved'))\r\n\r\n//             .catch(error => {\r\n//                 setError(error);\r\n//                 setStatus('rejected')\r\n//             })\r\n//     }, [baseApi, setPictures, myKey, page, pictureName]);\r\n\r\n//     useEffect(() => {\r\n//         if (page === 1) {\r\n//             return;\r\n//         }\r\n//         setStatus('pending');\r\n//         fetchImages(pictureName, baseApi, myKey, page)\r\n//             .then(pictures => {\r\n//                 if (pictures.length === 0) {\r\n//                     return setStatus('rejected')\r\n//                 }\r\n//                 setPictures(pictures);\r\n//             })\r\n//             .then(setStatus('resolved'))\r\n//             .then(() => window.scrollTo({\r\n//                 top: document.documentElement.scrollHeight,\r\n//                 behavior: 'smooth',\r\n//             }))\r\n//             .catch(error => {\r\n//                 setError(error);\r\n//                 setStatus('rejected')\r\n//             })\r\n//     }, [baseApi, myKey, page, pictureName, pictures, setPictures]);\r\n\r\n\r\n\r\n//     const onLoadMoreBtn = () => {\r\n//         setPage((prevPage) => prevPage + 10);\r\n\r\n//     }\r\n\r\n//     console.log(page)\r\n//     const toggleModal = () => {\r\n//         setShowModal(!showModal)\r\n\r\n//     };\r\n//     const takeModalPicture = (url) => {\r\n//         setLargeUrl(url)\r\n//         setShowModal(true)\r\n\r\n//     };\r\n\r\n//     if (status === 'idle') {\r\n//         return <h1 className=\"title\"> Enter what are you looking for.</h1>\r\n//     }\r\n//     if (status === 'pending') {\r\n//         return <Spinner />\r\n\r\n//     }\r\n//     if (status === 'rejected') {\r\n//         return <h1 className=\"title\">\r\n//             By searching \"{pictureName}\" nothing found, sorry.<br />\r\n//             Try enter something else\r\n//         </h1>\r\n//     }\r\n//     if (status === 'resolved') {\r\n//         return (\r\n//             <div>\r\n//                 <ul className=\"ImageGallery\">\r\n//                     {pictures.map((picture) => (\r\n//                         <ImageGalleryItem\r\n//                             key={shortid.generate()}\r\n//                             webformatURL={picture.webformatURL}\r\n//                             largeImageURL={picture.largeImageURL}\r\n//                             onOpen={takeModalPicture}\r\n//                         />\r\n//                     ))}\r\n//                 </ul>\r\n//                 {showModal && (\r\n//                     <Modal onClose={toggleModal}>\r\n//                         <img src={largeUrl} alt=\"modal-img\" />\r\n//                     </Modal>\r\n//                 )\r\n//                 }\r\n//                 <LoadMoreBtn onLoadMoreBtn={onLoadMoreBtn} />\r\n//             </div >\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n// ImageGallery.propTypes = {\r\n//     inputValue: PropTypes.string,\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { Component } from 'react';\r\n// import PropTypes from \"prop-types\";\r\n// import ImageGalleryItem from '../ImageGalleryItem';\r\n// import fetchImages from '../../services/imageApi';\r\n// import Spinner from '../Loader/Loader'\r\n// import LoadMoreBtn from '../Button'\r\n// import Modal from '../Modal'\r\n\r\n\r\n// export default class ImageGallery extends Component {\r\n//     state = {\r\n//         pictureName: null,\r\n//         error: null,\r\n//         status: 'idle',\r\n//         pictures: [],\r\n//         baseApi: \"https://pixabay.com/api/\",\r\n//         myKey: '23171615-fcdc729843fe7af43a640cf8d',\r\n//         page: 1,\r\n//         largeUrl: \" \",\r\n//         showModal: false,\r\n//     }\r\n\r\n//     componentDidUpdate(prevProps, prevState) {\r\n//         const { baseApi, myKey, page } = this.state;\r\n//         const { pictureName } = this.props;\r\n\r\n//         if (prevProps.pictureName !== this.props.pictureName) {\r\n\r\n//             this.setState({ status: 'pending' });\r\n//             this.setState({ pictures: [] });\r\n//             this.setState({ page: 1 })\r\n\r\n//             fetchImages(pictureName, baseApi, myKey, page)\r\n//                 .then((pictures) => {\r\n//                     if (pictures.length === 0) {\r\n//                         return this.setState({ status: 'rejected' });\r\n\r\n//                     }\r\n//                     this.getPictures(pictures);\r\n\r\n//                 })\r\n\r\n//                 .then(this.setState({ status: 'resolved' }))\r\n//                 .catch((error) => this.setState({ error, status: 'rejected' }));\r\n\r\n\r\n//         }\r\n//         else if (prevState.page !== this.state.page && this.state.page !== 1) {\r\n//             this.setState({ status: 'pending' });\r\n\r\n//             fetchImages(pictureName, baseApi, myKey, page)\r\n//                 .then((pictures) => this.getPictures(pictures))\r\n//                 .then(this.setState({ status: 'resolved' }))\r\n//                 .then(() => window.scrollTo({\r\n//                     top: document.documentElement.scrollHeight,\r\n//                     behavior: 'smooth',\r\n//                 })\r\n//                 )\r\n//                 .catch((error) => this.setState({ error, status: 'rejected' }))\r\n//         }\r\n//     }\r\n\r\n\r\n//     getPictures = (arr) => {\r\n//         const newArr = arr.map((picture) => {\r\n//             return {\r\n//                 id: picture.id,\r\n//                 webformatURL: picture.webformatURL,\r\n//                 largeImageURL: picture.largeImageURL\r\n//             };\r\n//         });\r\n\r\n//         this.setState({\r\n//             pictures: [...this.state.pictures, ...newArr],\r\n//         });\r\n//     };\r\n//     onLoadMoreBtn = () => {\r\n//         this.setState({\r\n//             page: this.state.page + 1,\r\n//         })\r\n//     }\r\n//     toggleModal = () => {\r\n//         this.setState(({ showModal }) => ({\r\n//             showModal: !showModal,\r\n//         }))\r\n//     };\r\n//     takeModalPicture = (url) => {\r\n//         this.setState({ largeUrl: url, showModal: true })\r\n//     };\r\n\r\n//     render() {\r\n\r\n//         const { pictures, status, largeUrl, showModal } = this.state\r\n\r\n//         if (status === 'idle') {\r\n//             return <h1 className=\"title\"> Enter what are you looking for.</h1>\r\n//         }\r\n//         if (status === 'pending') {\r\n//             return <Spinner />\r\n\r\n//         }\r\n//         if (status === 'rejected') {\r\n//             return <h1 className=\"title\">\r\n//                 By searching \"{this.props.pictureName}\" nothing found, sorry.<br />\r\n//                 Try enter something else\r\n//             </h1>\r\n//         }\r\n//         if (status === 'resolved') {\r\n//             return (\r\n//                 <div>\r\n//                     <ul className=\"ImageGallery\">\r\n//                         {pictures.map((picture) => (\r\n//                             <ImageGalleryItem\r\n//                                 key={picture.id}\r\n//                                 webformatURL={picture.webformatURL}\r\n//                                 largeImageURL={picture.largeImageURL}\r\n//                                 onOpen={this.takeModalPicture}\r\n//                             />\r\n//                         ))}\r\n//                     </ul>\r\n//                     {showModal && (\r\n//                         <Modal onClose={this.toggleModal}>\r\n//                             <img src={largeUrl} alt=\"modal-img\" />\r\n//                         </Modal>\r\n//                     )\r\n//                     }\r\n//                     <LoadMoreBtn onLoadMoreBtn={this.onLoadMoreBtn} />\r\n//                 </div >\r\n//             )\r\n//         }\r\n//     }\r\n\r\n// }\r\n\r\n\r\n// ImageGallery.propTypes = {\r\n//     inputValue: PropTypes.string,\r\n// };","import { useState } from 'react';\nimport './App.module.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer } from 'react-toastify';\nimport Searchbar from './components/Searchbar'\nimport ImageGallery from './components/ImageGallery';\n\n\n\nexport default function App() {\n  const [pictureName, setPictureName] = useState('')\n\n\n  // const handleFormSubmit = pictureName => {\n  //   setPictureName(pictureName)\n  // }\n\n\n  return (\n    <div>\n      <Searchbar onSubmitProp={setPictureName} />\n      <ImageGallery pictureName={pictureName} />\n      <ToastContainer autoClose={3000} />\n    </div>\n  );\n\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}